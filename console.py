#Simple sql console generated by ChatGPT.
#Use to modify records in the database.
#Note: Use it when app is not running.

import sqlite3, colorama, os # type: ignore

def connect_to_database(db_name):
    try:
        conn = sqlite3.connect(db_name)
        print(f"Connected to database '{db_name}' successfully.")
        return conn
    except sqlite3.Error as e:
        print(f"Error connecting to database: {e}")
        return None

def execute_sql_command(conn, command: str):
    try:
        cursor = conn.cursor()
        cursor.execute(command)
        conn.commit()

        # If it's a SELECT query, fetch and display results
        if command.strip().lower().startswith("select"):
            results = cursor.fetchall()
            for row in results:
                print(row)
        else:
            print("Command executed successfully.")
    except sqlite3.Error as e:
        print(f"An error occurred: {e}")

def show_tables(conn):
    try:
        cursor = conn.cursor()
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
        tables = cursor.fetchall()
        if tables:
            print("Tables in the database:")
            for table in tables:
                print(table[0])
        else:
            print("No tables found in the database.")
    except sqlite3.Error as e:
        print(f"An error occurred: {e}")

def show_table_info(conn, table_name):
    try:
        cursor = conn.cursor()
        cursor.execute(f"PRAGMA table_info({table_name});")
        columns = cursor.fetchall()
        if columns:
            print(f"Table structure for '{table_name}':")
            print("cid | name | type | notnull | dflt_value | pk")
            for column in columns:
                print(column)
        else:
            print(f"No information found for table '{table_name}'.")
    except sqlite3.Error as e:
        print(f"An error occurred: {e}")

def help():
    print("Hello, happy to see you using this bs code")
    print("If you need help feel free to see homepage of this progject: https://github.com/news-s/db_console")
    print("Or dm me on Discord: news.exe")
    print("    exit                  - just what it says, exits program. Easer than in vim.")
    print("    show tables           - shows all tables in the database.")
    print("    describe <table_name> - prints everything about all cilumns in the table.")
    print("Everything else is like in normal sqlite3.")

def find_file(name: str) -> bool:
    for f in os.listdir():
        if f == name: return True
    return False

def run_commands(command: str, conn, table_name: str) -> bool:
    command = command.lower().split()[0]
    # I would do that using match-case, but I don't have installed newest version :(
    if command == 'exit': return 0
    elif command == 'show':        show_tables(conn)
    elif command == 'describe':    show_table_info(conn, table_name)
    elif command == 'help':        help()
    else:               execute_sql_command(conn, command)
            

def main(db_name: str) -> None:
    conn = connect_to_database(db_name)

    if conn:
        while True:
            command = input(colorama.Fore.GREEN + "Enter an SQL command: " + colorama.Fore.WHITE)
            if len(command.split()) == 0:
                name = command.split()[1]
            else: name = None
            if run_commands(command, conn, name) == 0:
                break

        conn.close()
        print("Connection closed.")

def start():
    db_name = input("Enter the name of the sqlite3 database file: ")
    db_name = db_name + ".sqlite3"
    if find_file(db_name):
        print("Connecting to database")
        main(db_name)
    else:
        print(f"No file with name '{db_name}'. Do you want to create y/n")
        response = input()
        if response.lower() == 'y':
            main(db_name)
        elif response.lower() == 'n':
            print("oki")
            return 0
        else:
            print("huh? lets try again")
            start()

if __name__ == "__main__":
    start()