#Simple sql console generated by ChatGPT.
#Use to modify records in the database.
#Note: Use it when app is not running.


import sqlite3, colorama

def connect_to_database(db_name):
    try:
        conn = sqlite3.connect(db_name)
        print(f"Connected to database '{db_name}' successfully.")
        return conn
    except sqlite3.Error as e:
        print(f"Error connecting to database: {e}")
        return None

def execute_sql_command(conn, command):
    try:
        cursor = conn.cursor()
        cursor.execute(command)
        conn.commit()

        # If it's a SELECT query, fetch and display results
        if command.strip().lower().startswith("select"):
            results = cursor.fetchall()
            for row in results:
                print(row)
        else:
            print("Command executed successfully.")
    except sqlite3.Error as e:
        print(f"An error occurred: {e}")

def show_tables(conn):
    try:
        cursor = conn.cursor()
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
        tables = cursor.fetchall()
        if tables:
            print("Tables in the database:")
            for table in tables:
                print(table[0])
        else:
            print("No tables found in the database.")
    except sqlite3.Error as e:
        print(f"An error occurred: {e}")

def show_table_info(conn, table_name):
    try:
        cursor = conn.cursor()
        cursor.execute(f"PRAGMA table_info({table_name});")
        columns = cursor.fetchall()
        if columns:
            print(f"Table structure for '{table_name}':")
            print("cid | name | type | notnull | dflt_value | pk")
            for column in columns:
                print(column)
        else:
            print(f"No information found for table '{table_name}'.")
    except sqlite3.Error as e:
        print(f"An error occurred: {e}")

def main():
    db_name = input("Enter the name of the database file (e.g., 'example.db'): ")
    conn = connect_to_database(db_name)

    if conn:
        while True:
            command = input(colorama.Fore.GREEN + "Enter an SQL command (or 'show tables', 'describe <table>', 'exit' to quit): " + colorama.Fore.WHITE)
            if command.lower() == 'exit':
                break
            elif command.lower() == 'show tables':
                show_tables(conn)
            elif command.lower().startswith('describe '):
                table_name = command.split()[1]
                show_table_info(conn, table_name)
            else:
                execute_sql_command(conn, command)

        conn.close()
        print("Connection closed.")

if __name__ == "__main__":
    main()
